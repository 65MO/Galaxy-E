<tool id="Grouping1" name="Grouper" version="2.1.1">
  <description>des données par une colonne et pratiquer des opérations d'aggrégation sur d'autres colonnes.</description>
  <command interpreter="python">
    grouping.py 
      "${out_file1}"
      "${input1}"
      "${groupcol}"
      "${ignorecase}"
      "${ignorelines}"
      #for $op in $operations
       '${op.optype}
        ${op.opcol}
        ${op.opround}'
      #end for
  </command>
  <inputs>
    <param format="tabular" name="input1" type="data" label="Selectionner les données" help="Jeu de données non présent ? Voir ASTUCE plus bas"/>
    <param name="groupcol" label="Grouper par la colonne" type="data_column" data_ref="input1" />
    <param name="ignorecase" type="boolean" truevalue="1" falsevalue="0">
      <label>Ignorer la casse en groupant ?</label>
    </param>
    <param name="ignorelines" type="select" display="checkboxes" multiple="True" label="Ignorer les lignes commençant par ces caractères" help="les lignes débutant par ces caractères ne seront pas considérés">
            <option value="62">&gt;</option>
            <option value="64">@</option>
            <option value="43">+</option>
            <option value="60">&lt;</option>
            <option value="42">*</option>
            <option value="45">-</option>
            <option value="61">=</option>
            <option value="124">|</option>
            <option value="63">?</option>
            <option value="36">$</option>
            <option value="46">.</option>
            <option value="58">:</option>
            <option value="38">&amp;</option>
            <option value="37">%</option>
            <option value="94">^</option>
            <option value="35">&#35;</option>
    </param>
    <repeat name="operations" title="Opération">
      <param name="optype" type="select" label="Type">
        <option value="mean">Moyennes</option>
        <option value="median">Médiane</option>
        <option value="mode">Mode</option>
        <option value="max">Maximum</option>
        <option value="min">Minimum</option>
        <option value="sum">Somme</option>
        <option value="length">Comptage</option>
        <option value="unique">Comptage unique</option>
        <option value="cat">Concaténation</option>
        <option value="cat_links">Concaténation avec liens</option>
        <option value="cat_uniq">Concaténation unique</option>
        <option value="random">Tirage aléatoire</option>
        <option value="std">Déviation standard</option>
      </param>
      <param name="opcol" label="Sur la colonne" type="data_column" data_ref="input1" />
      <param name="opround" type="select" label="Arrondir les résultats à l'entier le plus proche ?">
         <option value="no">NON</option>
         <option value="yes">OUI</option>
       </param>
    </repeat>
  </inputs>
  <outputs>
    <data format="tabular" name="out_file1" />
  </outputs>
  <requirements>
    <requirement type="python-module">numpy</requirement>
  </requirements>
  <tests>
    <!-- Test valid data -->
    <test>
      <param name="input1" value="1.bed"/>
      <param name="groupcol" value="1"/>
      <param name="ignorecase" value="true"/>
      <param name="optype" value="mean"/>
      <param name="opcol" value="2"/>
      <param name="opround" value="no"/>
      <output name="out_file1" file="groupby_out1.dat"/>
    </test>
    <!-- Long case but test framework doesn't allow yet
    <test>
      <param name="input1" value="1.bed"/>
      <param name="groupcol" value="1"/>
      <param name="ignorecase" value="false"/>
      <param name="operations" value='[{"opcol": "2", "__index__": 0, "optype": "mean", "opround": "no"}, {"opcol": "2", "__index__": 1, "optype": "median", "opround": "no"}, {"opcol": "6", "__index__": 2, "optype": "mode", "opround": "no"}, {"opcol": "2", "__index__": 3, "optype": "max", "opround": "no"}, {"opcol": "2", "__index__": 4, "optype": "min", "opround": "no"}, {"opcol": "2", "__index__": 5, "optype": "sum", "opround": "no"}, {"opcol": "1", "__index__": 6, "optype": "length", "opround": "no"}, {"opcol": "1", "__index__": 7, "optype": "unique", "opround": "no"}, {"opcol": "1", "__index__": 8, "optype": "cat", "opround": "no"}, {"opcol": "6", "__index__": 9, "optype": "cat_uniq", "opround": "no"}, {"opcol": "2", "__index__": 10, "optype": "random", "opround": "no"}, {"opcol": "2", "__index__": 11, "optype": "std", "opround": "no"}]'/>
      <output name="out_file1" file="groupby_out3.tabular"/>
    </test>
    -->
    <!-- Test data with an invalid value in a column. Can't do it because test framework doesn't allow testing of errors
    <test>
      <param name="input1" value="1.tabular"/>
      <param name="groupcol" value="1"/>
      <param name="ignorecase" value="true"/>
      <param name="optype" value="mean"/>
      <param name="opcol" value="2"/>
      <param name="opround" value="no"/>
      <output name="out_file1" file="groupby_out2.dat"/>
    </test>
     -->
  </tests>
  <help>

.. class:: infomark

**ASTUCE:** Si vos données ne sont pas au format tabulé, utilisez l'outil *Manipulation de texte-&gt;Convertir*

-----

**Syntaxe**

Cet outil permet de grouper les jeux de données d'entrée par une colonne particulière et d'appliquer des fonctions d'aggrégation : Moyenne, Médiane, Mode, Somme, Max, Min, Comptage, Concaténation, et Tirage aléatoire sur n'importe quelle(s) colonne(s).

La fonction de concaténation prendra, pour chaque groupe, chaque item de la colonne spcifiée et construira une liste séparé par des virgules. Concaténation unique effectuera la même opération mais construira une liste de valeurs uniques sans répétition.

Comptage et Comptage unique sont équivalent à Concaténation et Concaténation unique, sauf qu'ils compteront le nombre d'items et retourneront un entier.

- Si des odes multiples sont présents, tous sont reportés.

-----

**Exemple**

- Si l'on considère les données d'entrée suivantes ::

   habitat22  1000  1003  TTT
   habitat22  2000  2003  aaa
   habitat10  2200  2203  TTT
   habitat10  1200  1203  ttt
   habitat22  1600  1603  AAA

- **Grouper par la colonne 4** en ignorant la casse, et en appliquant l'opération **Comptage sur la colone 1** retournera ::

   AAA    2
   TTT    3
   
- **Grouper par la colonne 4** sans ignorer la casse, et en appliquant l'opération **Comptage sur la colone 1** retournera ::

   aaa    1
   AAA    1
   ttt    1
   TTT    2
  </help>
</tool>

