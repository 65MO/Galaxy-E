<tool id="tp_easyjoin_tool" name="Jointure relationnelle" version="@BASE_VERSION@.1">
    <description>de deux jeux de données</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements">
        <requirement type="package" version="5.22.0.1">perl</requirement>
    </expand>
    <version_command>join --version | head -n 1</version_command>
    <command>
<![CDATA[
        cp $__tool_directory__/sort-header ./ &&
        chmod +x sort-header &&
        perl $__tool_directory__/easyjoin
            $jointype
            -t '	'
            $header
            -e '$empty_string_filler'
            -o auto
            $ignore_case
            -1 '$column1'
            -2 '$column2'
            "$infile1"
            "$infile2"
            > '$output'
]]>
    </command>
    <inputs>
        <param name="infile1" format="tabular" type="data" label="Premier fichier" />
        <param name="column1" label="Colonne de référence à utiliser à partir du premier fichier" type="data_column" data_ref="infile1" accept_default="true" />

        <param name="infile2" format="txt" type="data" label="Second fichier" />
        <param name="column2" label="Colonne de référence à utiliser à partir du second fichier" type="data_column" data_ref="infile2" accept_default="true" />

        <param name="jointype" type="select" label="Exporter les lignes apparaissant dans">
            <option value=" " selected="True">Le premier &amp; le second fichier.</option>
            <option value="-v 1">Le premier mais pas le second fichier. (-v 1)</option>
            <option value="-v 2">Le second mais pas le premier fichier. (-v 2)</option>
            <option value="-a 1">Le premier &amp; le second fichier, plus les lignes non trouvées dans le premier fichier. (-a 1)</option>
            <option value="-a 2">Le premier &amp; le second fichier, plus les lignes non trouvées dans le second fichier. (-a 2)</option>
            <option value="-a 1 -a 2">Toutes les lignes [-a 1 -a 2]</option>
            <option value="-v 1 -v 2">Toutes les lignes non trouvées [-v 1 -v 2]</option>
        </param>

        <param name="header" type="boolean" checked="false" truevalue="--header" falsevalue=""
            label="La première ligne est un en-tête" help="Utiliser cette option si la première ligne du jeu de données est un en-tête de colonnes. Le jeu de données ne sera pas trié." />
        <param name="ignore_case" type="boolean" checked="false" truevalue="-i" falsevalue=""
            label="Ignorer la casse" help="Trier et joindre les valeurs de colonnes sans se soucier de la casse minuscule/majuscule des caractères." />
        <param name="empty_string_filler" type="text" value="0" label="Valeur à indiquer pour les champs non trouvées (vides)">
            <sanitizer>
                <valid initial="string.printable">
                    <remove value="&apos;"/>
                </valid>
            </sanitizer>
        </param>
    </inputs>
    <outputs>
        <data name="output" format_source="infile1" metadata_source="infile1"/>
    </outputs>
    <tests>
        <test>
            <param name="infile1" value="easyjoin1.tabular" />
            <param name="column1" value="1" />
            <param name="infile2" value="easyjoin2.tabular" />
            <param name="column2" value="1" />
            <param name="header" value="True" />
            <param name="jointype" value="-a 1 -a 2" />
            <output name="output" file="easyjoin_result1.tabular" />
        </test>
    </tests>
    <help>
<![CDATA[
**Ce que fait l'outil**

Cet outil permet de joindre deux fichiers tabulés en se basant sur une colonne de référence.

-----

**Exemple**

**Premier fichier**::

    Fruit	Color
    Apple	red
    Banana	yellow
    Orange	orange
    Melon	green

**Second fichier**::

    Fruit	Price
    Orange	7
    Avocado	8
    Apple	4
    Banana	3

**Joindre** les 2 fichiers, en utilisant **colonne de référence 1** et **La première ligne est un en-tête**, retournera ::

    Fruit	Color	Price
    Apple	red	4
    Avocado	.	8
    Banana	yellow	3
    Melon	green	.
    Orange	orange	7

.. class:: infomark

 * Les données d'entrée doivent être triées.
 * La ligne d'en-tête (**Fruit  Color  Price**) a été jointe et conservée comme première ligne.
 * Les valeurs manquantes ( Avocado's color, non présent dans le premier jeu de données ) sont remplacées par un caractère spécial.

@REFERENCES@
]]>
    </help>
    <expand macro="citations" />
</tool>