<tool id="Cut1" name="Couper" version="1.0.2">
  <description>des colonnes d'un jeu de données tabulé</description>
  <command interpreter="perl">cutWrapper.pl "${input}" "${columnList}" "${delimiter}" "${out_file1}"</command>
  <inputs>
    <param name="columnList" type="text" value="c1,c2" label="Couper les colonnes"/>
    <param name="delimiter" type="select" label="Délmitées par">
      <option value="T">Tabulation</option>
      <option value="Sp">Espace</option>
      <option value="Dt">Point</option>
      <option value="C">Virgule</option>
      <option value="D">Tiret</option>
      <option value="U">Underscore</option>
      <option value="P">Pipe</option>
    </param>
    <param format="txt" name="input" type="data" label="De"/>
  </inputs>
  <outputs>
    <data format="tabular" name="out_file1" >
      <actions>
        <conditional name="delimiter">
          <when value="T">
            <conditional name="input">
              <when datatype_isinstance="interval">
                <action type="format" default="tabular">
                  <option type="from_param" name="columnList" column="0" offset="0"> <!-- chromCol is 1-->

                    <filter type="insert_column" column="0" value="interval"/>

                    <filter type="insert_column" ref="columnList" /> <!-- startCol -->

                    <filter type="insert_column" ref="columnList" /> <!-- endCol -->

                    <filter type="multiple_splitter" column="1" separator=","/>
                    <filter type="column_strip" column="1"/> <!-- get rid of all external whitespace -->
                    <filter type="string_function" column="1" name="lower" />
                    <filter type="param_value" column="1" value="^c\d{1,}$" compare="re_search" keep="True"/>
                    <filter type="column_strip" column="1" strip="c"/> <!-- get rid of c's  -->
                    <filter type="boolean" column="1" cast="int" />

                    <filter type="multiple_splitter" column="2" separator=","/>
                    <filter type="column_strip" column="2"/> <!-- get rid of all external whitespace -->
                    <filter type="string_function" column="2" name="lower" />
                    <filter type="param_value" column="2" value="^c\d{1,}$" compare="re_search" keep="True"/>
                    <filter type="column_strip" column="2" strip="c"/> <!-- get rid of c's  -->
                    <filter type="boolean" column="2" cast="int" />

                    <filter type="multiple_splitter" column="3" separator=","/>
                    <filter type="column_strip" column="3"/> <!-- get rid of all external whitespace -->
                    <filter type="string_function" column="3" name="lower" />
                    <filter type="param_value" column="3" value="^c\d{1,}$" compare="re_search" keep="True"/>
                    <filter type="column_strip" column="3" strip="c"/> <!-- get rid of c's  -->
                    <filter type="boolean" column="3" cast="int" />

                    <filter type="metadata_value" ref="input" name="chromCol" column="1" />
                    <filter type="metadata_value" ref="input" name="startCol" column="2" />
                    <filter type="metadata_value" ref="input" name="endCol" column="3" />

                  </option>
                </action>

                <conditional name="out_file1">
                  <when datatype_isinstance="interval">
                    <action type="metadata" name="chromCol">
                      <option type="from_param" name="columnList" column="0" offset="0"> <!-- chromCol is 0-->
                        <filter type="multiple_splitter" column="0" separator=","/>
                        <filter type="column_strip" column="0"/> <!-- get rid of all external whitespace -->
                        <filter type="string_function" column="0" name="lower" />
                        <filter type="param_value" column="0" value="^c\d{1,}$" compare="re_search" keep="True"/>
                        <filter type="column_strip" column="0" strip="c"/> <!-- get rid of c's  -->
                        <filter type="insert_column" value="1" iterate="True" column="0"/>
                        <filter type="boolean" column="1" cast="int" />
                        <filter type="metadata_value" ref="input" name="chromCol" column="1" />
                      </option>
                    </action>

                    <action type="metadata" name="startCol">
                      <option type="from_param" name="columnList" column="0" offset="0"> <!-- startCol is 0-->
                        <filter type="multiple_splitter" column="0" separator=","/>
                        <filter type="column_strip" column="0"/> <!-- get rid of all external whitespace -->
                        <filter type="string_function" column="0" name="lower" />
                        <filter type="param_value" column="0" value="^c\d{1,}$" compare="re_search" keep="True"/>
                        <filter type="column_strip" column="0" strip="c"/> <!-- get rid of c's  -->
                        <filter type="insert_column" value="1" iterate="True" column="0"/>
                        <filter type="boolean" column="1" cast="int" />
                        <filter type="metadata_value" ref="input" name="startCol" column="1" />
                      </option>
                    </action>

                    <action type="metadata" name="endCol">
                      <option type="from_param" name="columnList" column="0" offset="0"> <!-- endCol is 0-->
                        <filter type="multiple_splitter" column="0" separator=","/>
                        <filter type="column_strip" column="0"/> <!-- get rid of all external whitespace -->
                        <filter type="string_function" column="0" name="lower" />
                        <filter type="param_value" column="0" value="^c\d{1,}$" compare="re_search" keep="True"/>
                        <filter type="column_strip" column="0" strip="c"/> <!-- get rid of c's  -->
                        <filter type="insert_column" value="1" iterate="True" column="0"/>
                        <filter type="boolean" column="1" cast="int" />
                        <filter type="metadata_value" ref="input" name="endCol" column="1" />
                      </option>
                    </action>

                    <action type="metadata" name="nameCol" default="0">
                      <option type="from_param" name="columnList" column="0" offset="0"> <!-- nameCol is 0-->
                        <filter type="multiple_splitter" column="0" separator=","/>
                        <filter type="column_strip" column="0"/> <!-- get rid of all external whitespace -->
                        <filter type="string_function" column="0" name="lower" />
                        <filter type="param_value" column="0" value="^c\d{1,}$" compare="re_search" keep="True"/>
                        <filter type="column_strip" column="0" strip="c"/> <!-- get rid of c's  -->
                        <filter type="insert_column" value="1" iterate="True" column="0"/>
                        <filter type="boolean" column="1" cast="int" />
                        <filter type="metadata_value" ref="input" name="nameCol" column="1" />
                      </option>
                    </action>

                    <action type="metadata" name="strandCol" default="0">
                      <option type="from_param" name="columnList" column="0" offset="0"> <!-- strandCol is 0-->
                        <filter type="multiple_splitter" column="0" separator=","/>
                        <filter type="column_strip" column="0"/> <!-- get rid of all external whitespace -->
                        <filter type="string_function" column="0" name="lower" />
                        <filter type="param_value" column="0" value="^c\d{1,}$" compare="re_search" keep="True"/>
                        <filter type="column_strip" column="0" strip="c"/> <!-- get rid of c's  -->
                        <filter type="insert_column" value="1" iterate="True" column="0"/>
                        <filter type="boolean" column="1" cast="int" />
                        <filter type="metadata_value" ref="input" name="strandCol" column="1" />
                      </option>
                    </action>
                  </when>
                </conditional>

              </when>
            </conditional>
          </when>
        </conditional>
      </actions>
    </data>
  </outputs>
  <tests>
    <test>
      <param name="columnList" value="c1,c4,c2,c3"/>
      <param name="delimiter" value="T"/>
      <param name="input" value="1.bed"/>
      <output name="out_file1" file="eq-cut.dat"/>
    </test>
    <test>
      <param name="columnList" value="c1,c4,c2-c3" />
      <param name="delimiter" value="T" />
      <param name="input" value="1.bed" />
      <output name="out_file1" file="eq-cut.dat" />
    </test>
  </tests>
  <help>

.. class:: warningmark

**ATTENTION: Cet outil casse l'assignement des colonnes.** Afin de ré-établir les assignements de colonnes, il faut exécuter l'outil puis clicquer sur l'icône de type pinceau au niveau de l'item généré dans l'historique.

.. class:: infomark

La sortie de cet outil et toujours au format tabulé. (i.e., si vos délimiteurs du fichier d'origine sont des virgules, ils seront remplacés par des tabulations). Par exemple:

  Couper les colonnes 1 et 3 de::

     apple,est,mauvais
     linux,est,bien

  donnera::

    apple   mauvais
    linux bien

-----

**Ce que fait l'outil**

Cet outil permet de sélectionner des colonnes spécifiques à partir d'un jeu de données.

- Columns are specified as **c1**, **c2**, and so on. Column count begins with **1**
- Columns can be specified in any order (e.g., **c2,c1,c6**)
- If you specify more columns than actually present - empty spaces will be filled with dots

-----

**Example**

Input dataset (six columns: c1, c2, c3, c4, c5, and c6)::

   chr1 10   1000  gene1 0 +
   chr2 100  1500  gene2 0 +

**cut** on columns "**c1,c4,c6**" will return::

   chr1 gene1 +
   chr2 gene2 +

**cut** on columns "**c6,c5,c4,c1**" will return::

   + 0 gene1 chr1
   + 0 gene2 chr2

**cut** on columns "**c1-c3**" will return::

   chr1 10   1000
   chr2 100  1500


**cut** on columns "**c8,c7,c4**" will return::

   . . gene1
   . . gene2
</help>
</tool>
