<tool id="__MERGE_COLLECTION__"
      name="Merger des Collections"
      version="1.0.0"
      tool_type="merge_collection">
  <description>en une simple liste de fichiers</description>
  <type class="MergeCollectionTool" module="galaxy.tools" />
  <action module="galaxy.tools.actions.model_operations"
          class="ModelOperationToolAction"/>
  <macros>
      <xml name="suffix_param">
          <param name="suffix_pattern" label="Utiliser le pattern suivant :" help="Décrire le pattern de suffixe à utiliser pour joindre le nom d'un élément le nombre de copies de la donnée. Pour le moment, le pattern par défaut est '_#', qui produira _1 comme premier suffixe utilisé." value="_#" type="text">
              <sanitizer invalid_char="">
                  <valid initial="string.letters,string.digits">
                      <add value="_" />
                      <add value="-" />
                      <add value="#" />
                  </valid>
              </sanitizer>
          </param>
      </xml>
      <xml name="test_collecton_simple_then_alternative">
          <collection type="list">
            <element name="sample1" value ="simple_line.txt"/>
            <element name="sample2" value ="simple_line_alternative.txt"/>
          </collection>
      </xml>
      <xml name="test_collection_alternative_then_simple">
          <collection type="list">
            <element name="sample1" value ="simple_line_alternative.txt"/>
            <element name="sample2" value ="simple_line.txt"/>
          </collection>
      </xml>
      <xml name="advanced_section" tokens="duplicate_handling,suffix_pattern">
          <section name="advanced">
              <conditional name="conflict">
                  <param name="duplicate_options" value="@DUPLICATE_HANDLING@" />
                  <param name="suffix_pattern" value="@SUFFIX_PATTERN@" />
              </conditional>
          </section>
      </xml>
      <xml name="assert_is_simple_line">
          <assert_contents>
              <has_text_matching expression="^This is a line of text.\n$"/>
          </assert_contents>
      </xml>
      <xml name="assert_is_simple_line_alternative">
          <assert_contents>
              <has_text_matching expression="^This is a different line of text.\n$"/>
          </assert_contents>
      </xml>
  </macros>
  <inputs>
    <repeat name="inputs" title="Collections d'entrée" min="2">
        <param name="input" type="data_collection" label="Collection d'entrée" />
    </repeat>
    <section name="advanced" title="Options Avancées">
        <conditional name="conflict">
          <param name="duplicate_options" type="select" label="Comment doivent être gérés les conflits (ou potentiel sconflits) ?"
                 help="LEs éléments d'une Collection doivent avoir un identifiant élémentaire unique, en cas de conflit, comment réagir.">
            <option value="suffix_conflict">Ajouter un suffixe aux identifiants élémentaires conflictuels</option>
            <option value="suffix_conflict_rest">Ajouter un suffixe aux identifiants élémentaires conflictuels après qu'un premier ait été rencontré</option>
            <option value="suffix_every">Ajouter un suffixe à chaque identifiant élémentaire</option>
            <option value="keep_first" selected="true">Conserver la première version</option>
            <option value="keep_last">Conserver la dernière version</option>
            <option value="fail">Erreur lors de la création de collection</option>
          </param>      
          <when value="suffix_conflict">
            <expand macro="suffix_param" />
          </when>
          <when value="suffix_conflict_rest">
            <expand macro="suffix_param" />
          </when>
          <when value="suffix_every">
            <expand macro="suffix_param" />
          </when>
          <when value="keep_first" />
          <when value="keep_last" />
          <when value="fail" />
        </conditional>
    </section>
  </inputs>
  <outputs>
    <collection name="output" format_source="input" type_source="inputs_0|input" label="${on_string} (mergé)" >
    </collection>
  </outputs>
  <tests>
    <test>
      <repeat name="inputs">
        <param name="input">
          <collection type="list:paired">
            <element name="i1">
              <collection type="paired">
                <element name="forward" value="simple_line.txt" />
                <element name="reverse" value="simple_line_alternative.txt" />
              </collection>
            </element>          
          </collection>
        </param>
      </repeat>
      <repeat name="inputs">
        <param name="input">
          <collection type="list:paired">
            <element name="i2">
              <collection type="paired">
                <element name="forward" value="simple_line.txt" />
                <element name="reverse" value="simple_line_alternative.txt" />
              </collection>
            </element>           
          </collection>
        </param>
      </repeat>
      <output_collection name="output" type="list:paired">
        <element name="i1">
          <element name="forward">
            <expand macro="assert_is_simple_line" />
          </element>
          <element name="reverse">
            <expand macro="assert_is_simple_line_alternative" />
          </element>
        </element>
        <element name="i2">
          <element name="forward">
            <expand macro="assert_is_simple_line" />
          </element>
          <element name="reverse">
            <expand macro="assert_is_simple_line_alternative" />
          </element>
        </element>        
      </output_collection>
    </test>
    <test>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>
      </repeat>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>      
      </repeat>
      <expand macro="advanced_section" duplicate_handling="suffix_every" suffix_pattern="__#" />
      <output_collection name="output" type="list">
        <element name="sample1__1">
          <assert_contents>
            <has_text_matching expression="^This is a line of text.\n$"/>
          </assert_contents>
        </element>
        <element name="sample2__2">
          <assert_contents>
            <has_text_matching expression="^This is a different line of text.\n$"/>
          </assert_contents>
        </element>
        <element name="sample1__1">
          <assert_contents>
            <has_text_matching expression="^This is a line of text.\n$"/>
          </assert_contents>
        </element>
        <element name="sample2__1">
          <assert_contents>
            <has_text_matching expression="^This is a different line of text.\n$"/>
          </assert_contents>
        </element>                
      </output_collection>
    </test>
    <test>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>
      </repeat>
      <repeat name="inputs">
        <param name="input">
          <collection type="list">
            <element name="sample3" value ="simple_line.txt"/>
            <element name="sample4" value ="simple_line_alternative.txt"/>
          </collection>
        </param>      
      </repeat>
      <expand macro="advanced_section" duplicate_handling="suffix_every" suffix_pattern="__#" />
      <output_collection name="output" type="list">
        <element name="sample1__1">
            <expand macro="assert_is_simple_line" />
        </element>
        <element name="sample2__1">
            <expand macro="assert_is_simple_line_alternative" />
        </element>
        <element name="sample3__2">
            <expand macro="assert_is_simple_line" />
        </element>
        <element name="sample4__2">
            <expand macro="assert_is_simple_line_alternative" />
        </element>                
      </output_collection>
    </test>
    <test>
      <expand macro="advanced_section" duplicate_handling="suffix_conflict_rest" suffix_pattern="-#" />
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>
      </repeat>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>      
      </repeat>
      <output_collection name="output" type="list">
        <element name="sample1">
            <expand macro="assert_is_simple_line" />
        </element>
        <element name="sample2">
            <expand macro="assert_is_simple_line_alternative" />
        </element>
        <element name="sample1-2">
            <expand macro="assert_is_simple_line" />
        </element>
        <element name="sample2-2">
            <expand macro="assert_is_simple_line_alternative" />
        </element>                
      </output_collection>
    </test>
    <test>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>
      </repeat>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collection_alternative_then_simple" />
        </param>      
      </repeat>
      <output_collection name="output" type="list">
        <element name="sample1">
          <assert_contents>
            <has_text_matching expression="^This is a line of text.\n$"/>
          </assert_contents>
        </element>
        <element name="sample2">
          <assert_contents>
            <has_text_matching expression="^This is a different line of text.\n$"/>
          </assert_contents>
        </element>
      </output_collection>
    </test>
    <test>
      <expand macro="advanced_section" duplicate_handling="keep_last" suffix_pattern="__#" />
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collecton_simple_then_alternative" />
        </param>
      </repeat>
      <repeat name="inputs">
        <param name="input">
          <expand macro="test_collection_alternative_then_simple" />
        </param>
      </repeat>
      <output_collection name="output" type="list">
        <element name="sample1">
          <assert_contents>
            <has_text_matching expression="^This is a different line of text.\n$"/>
          </assert_contents>
        </element>
        <element name="sample2">
          <assert_contents>
            <has_text_matching expression="^This is a line of text.\n$"/>
          </assert_contents>
        </element>
      </output_collection>
    </test>
  </tests>
  <help><![CDATA[

This tool takes two lists and creates a single unified list.
    
.. class:: infomark

This tool will create new history datasets for your collection but your quota usage will not increase.

  ]]></help>
</tool>
