<tool id="__RELABEL_FROM_FILE__"
      name="Renommer les identifiants d'une liste"
      version="1.0.0"
      tool_type="relabel_from_file">
    <description>à partir du contenu d'un fichier</description>
    <type class="RelabelFromFileTool" module="galaxy.tools" />
    <action module="galaxy.tools.actions.model_operations"
            class="ModelOperationToolAction"/>
    <inputs>
        <param type="data_collection" name="input" label="Collection d'entrée" help="Une liste à partir de laquelle les identifiants seront renommés."/>
        <conditional name="how">
            <param type="select" name="how_select" label="How should the new labels be specified?">
                <option value="txt">Utiliser les lignes dans un simple fichier texte.</option>
                <option value="tabular">Faire correspondre les identifiants originaux à de nouveaux en utilisant une table à deux colonnes.</option>
            </param>
            <when value="txt">
                <param type="data" name="labels" format="txt" label="New Identifiers" />
                <param name="strict" type="boolean" label="S'assurer d'une correspondance stricte" help="Si sélectionnée, le fichier cible doit contenir exactement le bon nombre de lignes." truevalue="true" falsevalue="false" />
            </when>
            <when value="tabular">
                <param type="data" name="labels" format="tabular" label="Nouveaux Identifiants" />
                <param name="strict" type="boolean" label="S'assurer d'une correspondance stricte" help="Si sélectionnée, le fichier cible doit contenir exactement le bon nombre de lignes et qu'à chaque identifiant d'entré correspond exactement un élément de la colelction d'entrée." truevalue="true" falsevalue="false" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <collection name="output" format_source="input" type_source="input" label="${on_string} (relabelled)" >
        </collection>
    </outputs>
    <tests>
        <test>
            <param name="input">
                <collection type="list:paired">
                    <element name="i1">
                        <collection type="paired">
                            <element name="forward" value="simple_line.txt" />
                            <element name="reverse" value="simple_line_alternative.txt" />
                        </collection>
                    </element>
                </collection>
            </param>
            <param name="how_select" value="txt" />
            <param name="labels" value="new_labels_1.txt" ftype="txt" />
            <output_collection name="output" type="list:paired">
              <element name="new_i1">
                <element name="forward">
                  <assert_contents>
                    <has_text_matching expression="^This is a line of text.\n$" />
                  </assert_contents>
                </element>
                <element name="reverse">
                  <assert_contents>
                    <has_text_matching expression="^This is a different line of text.\n$" />
                  </assert_contents>
                </element>
              </element>
            </output_collection>
        </test>
        <test>
            <param name="input">
                <collection type="list:paired">
                    <element name="i1">
                        <collection type="paired">
                            <element name="forward" value="simple_line.txt" />
                            <element name="reverse" value="simple_line_alternative.txt" />
                        </collection>
                    </element>
                </collection>
            </param>
            <param name="how_select" value="tabular" />
            <param name="labels" value="new_labels_2.txt" ftype="tabular" />
            <output_collection name="output" type="list:paired">
              <element name="new_i1">
                <element name="forward">
                  <assert_contents>
                    <has_text_matching expression="^This is a line of text.\n$" />
                  </assert_contents>
                </element>
                <element name="reverse">
                  <assert_contents>
                    <has_text_matching expression="^This is a different line of text.\n$" />
                  </assert_contents>
                </element>
              </element>
            </output_collection>
        </test>
        <!-- test strict -->
        <test expect_failure="true">
            <param name="input">
                <collection type="list:paired">
                    <element name="wrongi">
                        <collection type="paired">
                            <element name="forward" value="simple_line.txt" />
                            <element name="reverse" value="simple_line_alternative.txt" />
                        </collection>
                    </element>
                </collection>
            </param>
            <param name="how_select" value="tabular" />
            <param name="labels" value="new_labels_2.txt" ftype="tabular" />
        </test>
        <test expect_failure="true">
            <param name="input">
                <collection type="list">
                    <element name="i1" value="simple_line.txt" />
                    <element name="i3" value="simple_line_alternative.txt" />
                </collection>
            </param>
            <param name="how_select" value="txt" />
            <param name="labels" value="new_labels_1.txt" ftype="txt" />
        </test>
        <!-- test label bad characters -->
        <test expect_failure="true">
            <param name="input">
                <collection type="list">
                    <element name="i1" value="simple_line.txt" />
                </collection>
            </param>
            <param name="how_select" value="txt" />
            <param name="labels" value="new_labels_bad_1.txt" ftype="txt" />
        </test>
        <!-- test label bad because of duplicates -->
        <test expect_failure="true">
            <param name="input">
                <collection type="list">
                    <element name="i1" value="simple_line.txt" />
                    <element name="i2" value="simple_line.txt" />
                </collection>
            </param>
            <param name="how_select" value="txt" />
            <param name="labels" value="new_labels_bad_2.txt" ftype="txt" />
        </test>
    </tests>
    <help><![CDATA[
    
.. class:: infomark

        This tool will take an input list and a text file with new identifiers
        and build a new list with the same datasets but these new identifiers.
        The order and number of entries in the text file must match the order
        of the items you want to rename in your dataset collection.

        Alternatively a tabular file may be supplied, where the first column
        if the current identifier that should be renamed, and the second column
        contains the new label. This file may contain less entries than items
        in the collection. In that case only matching list identifiers will be
        relabeled.

        This tool will create new history datasets from your collection
        but your quota usage will not increase.
    ]]></help>
</tool>
