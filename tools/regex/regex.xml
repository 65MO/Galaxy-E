<tool id="regex1" name="Trouver et Remplacer des patterns" version="1.0.0">
  <description>par expression régulière (regex)</description>
  <command interpreter="python">regex.py --input '$input' --output '$out_file1' --input_display_name '$input.display_name'
    #for $check in $checks:
    --pattern='$check.pattern' --replacement='$check.replacement'
    #end for
  </command>
  <inputs>
    <param format="txt" name="input" type="data" label="Sélectionner des lignes à partir de "/>
    <repeat name="checks" title="Check">
      <param name="pattern" size="40" type="text" value="chr([0-9A-Za-z])+" label="Trouver l'expression suivante" help="ici vous pouvez entrer du texte libre ou une expression régulière (pour la syntaxe, voir ci-dessous)">
        <sanitizer>
          <valid>
            <add preset="string.printable"/>
            <remove value="&#92;" />
            <remove value="&apos;" />
          </valid>
          <mapping initial="none">
            <add source="&#92;" target="__backslash__" />
            <add source="&apos;" target="__sq__"/>
          </mapping>
        </sanitizer>
      </param>
      <param name="replacement" size="40" type="text" value="newchr\1" label="Remplacement">
        <sanitizer>
          <valid>
            <add preset="string.printable"/>
            <remove value="&#92;" />
            <remove value="&apos;" />
          </valid>
          <mapping initial="none">
            <add source="&#92;" target="__backslash__" />
            <add source="&apos;" target="__sq__"/>
          </mapping>
        </sanitizer>      
      </param>
    </repeat>
  </inputs>
  <outputs>
    <data format="input" name="out_file1" metadata_source="input"/>
  </outputs>
  <tests>
    <test>
      <param name="input" value="find1.txt"/>
      <param name="pattern" value="(T\w+)"/>
      <param name="replacement" value="\1 \1" />
      <output name="out_file1" file="replace1.txt"/>
    </test>
    <test>
      <param name="input" value="find1.txt"/>
      <param name="pattern" value="f"/>
      <param name="replacement" value="'&quot;" />
      <output name="out_file1" file="replace2.txt"/>
    </test>
    <test>
      <param name="input" value="find1.txt"/>
      <param name="checks_0|pattern" value="a test file"/>
      <param name="checks_0|replacement" value="a file named #{input_name}" />
      <param name="checks_1|pattern" value="see here"/>
      <param name="checks_1|replacement" value="see #{input_name}" />
      <param name="checks_2|pattern" value="see (find1).txt"/>
      <param name="checks_2|replacement" value="see \1" />
      <output name="out_file1" file="replace3.txt"/>
    </test>
  </tests>
  <help>
Cet outil travaille ligne après ligne sur la donnée spécifiée en entrée et 
remplace le texte correspondant aux patterns d'expression régulière rentré
par la correspondance proposée.

Cet outil utilise les expressions régulières du language de programmation Python. Plus d'information à propos
de ces expressions régulières peut être trouvé ici :
http://docs.python.org/library/re.html.

Pour convertir un format de séquence par exemple ::

 @EAS139:136:FC706VJ:2:2104:15343:197393 1:Y:18:ATCACG
 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACC
 +EAS139:136:FC706VJ:2:2104:15343:197393 1:Y:18:ATCACG
 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9IC

Vers un autre format ::

 @EAS139_FC706VJ:2:2104:15343:197393#0/1
 GGGTGATGGCCGCTGCCGATGGCGTCAAATCCCACC
 +EAS139_FC706VJ:2:2104:15343:197393#0/1
 IIIIIIIIIIIIIIIIIIIIIIIIIIIIII9IG9IC

Utiliser les paramètres ::

 Trouver l'expression suivante : ^([@+][A-Z0-9]+):\d+:(\S+)\s(\d).*$
 Remplacemer par : \1_\2#0/\3

Note that the parentheses **()** capture patterns in the text that can be used in the replacement text by using a backslash-number reference:  **\\1**

L'expression regex **^([@+][A-Z0-9]+):\d+:(\S+) (\d).*$** signifie ::

  ^ - démarrer la correspondance au début de la ligne de texte
  (- démarre un groupe (1), qui correspond à une chaîne de texte recherchée, qui peut être renvoyé dans le remplacement comme \ 1
  [@ +] - correspond à un caractère @ ou +
  [A-Z0-9] + - correspond à une lettre majuscule ou à un chiffre, le signe plus signifie correspondre à 1 ou plus de ces caractères
  ) - termine un groupe (1), qui correspond à une chaîne de texte recherchée, qui peut être renvoyé dans le remplacement comme \ 1
  : \ D +: - correspond au deux-bout suivi d'un ou plusieurs chiffres suivi d'un caractère de deux points
  (\ S +) - correspond à un ou plusieurs charactères non-blancs, les parenthèses qui l'entourent en font un groupe (2) qui peut être renvoyé dans le texte de remplacement sous \
  \ S - correspond à un caractère blanc
  (\ D) - correspond à un caractère à un seul chiffre, les parenthèses ci-jointes en font un groupe (3) qui peut être renvoyé dans le texte de remplacement comme \ 3
  . * - le point signifie correspondre à un caractère, l'astérisque signifie zéro ou plus de correspondances
  $ - le regex doit correspondre à la fin de la ligne de texte

Dans le modèle de remplacement, utilisez le terme spécial # {input_name} pour insérer le nom d'affichage du jeu de données d'entrée.
Le nom peut être modifié par une deuxième vérification de recherche / remplacement. Supposons que vous souhaitez insérer l'identifiant échantillon de votre jeu de données, nommé ** Echantillon ABC123 **, dans l'ensemble de données, qui contient actuellement les lignes ::

 Donnée 1
 Donnée 2
 Donnée 3

Vous pouvez utiliser les vérifications suivantes ::

 Trouver l'expression : Donnée
 Remplacement: #{input_name} Donnée

 Trouver l'expression : Echantillon (\S+)
 Remplacement: \1

Le résultat sera ::

 ABC123 Donnée 1
 ABC123 Donnée 2
 ABC123 Donnée 3

Galaxy échappe agressivement l'entrée fournie aux outils, donc si quelque chose
Ne fonctionne pas, faites-le nous savoir et nous pouvons examiner si cela en est
la cause. 
</help>
</tool>
